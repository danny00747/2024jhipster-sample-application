
entity Town {
	postcode UUID required unique,
    name String
}

entity Address {
	addressId UUID required unique,
    road String, 
    postBox Long,
    number Long min(1)
}

entity Client {
	clientId UUID required unique,
    email String required unique,
    username String required unique,
    firstName String required, 
    lastName String required,
    password String    
}

entity Review {
	reviewId UUID required unique,
    reviexText String required unique,
    rating Integer min(1) max(10)  
}

entity PricingClass {
	pricingClass String required unique,
    dailyFine Integer min(1),
    priceByKm Integer min(1),
    allowedKmPerDay Integer,
    costPerDay Integer,
}

entity Booking {
	bookingId UUID required unique,
    cancellationDate LocalDate,
    bookingState BOOKINGSTATE,
    withdrawalDate LocalDate,
    returnDate LocalDate
}

enum BOOKINGSTATE {
    CANCELLED, FINISHED, DELETED, OPEN
}

entity Car {
	carId UUID required unique,
    carNumber Integer,
    purchasePrice Integer min(1),
    boughtAt LocalDate,
    returnDate LocalDate
}

entity Repair {
	repairId UUID required unique,
    repairStatus String,
    repairProgress String,
    totalCost String,
    scheduled LocalDate
}

entity Bill {
	billId UUID required unique,
    paymentDate LocalDate
}
 entity Rent {
	rentId UUID required unique,
    licenseNumber Long,
    withdrawalKm Integer, 
    returnKm Integer, 
    effectiveReturnDate LocalDate,
    cautionPayment Boolean
 }
 
  entity Model {
	modelId UUID required unique,
    modelName String
 }
 
entity ModelOption {
	optionCode UUID required unique,
    seatsNumber String,
    hasAirConditioner Boolean,
    bagsNumber Integer,
    isAutomatic Boolean
 }
 
 relationship OneToMany {
	Client{reviews} to Review,
	Model{cars} to Car,
    PricingClass{models} to Model,
    Town{addresses} to Address
}

relationship OneToOne {
	Address{client} to Client{address}, 
    Booking{bill} to Bill{booking}, 
    Rent{bill} to Bill{rent}, 
    Car{repair} to Repair{car}, 
    Booking{client} to Client{booking}, 
    Booking{rent} to Rent{booking}, 
    Booking{car} to Car{booking}, 
}

relationship ManyToMany {
	Model{modelOptions} to ModelOption{models},  
}

// Set pagination options
paginate Car, Booking, Bill, Town, Rent with pagination

// Use Data Transfer Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl

dto * with mapstruct






 






